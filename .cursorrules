# Video Editor Development Rules for Cursor AI

## üéØ START HERE - Read This First

**Before doing ANYTHING:**

1. **Read `memory-bank/activeContext.md`** - Current work focus, active decisions
2. **Read `memory-bank/progress.md`** - What's done, what's next
3. **Reference `_docs/architecture.md`** - When implementing features or making decisions

These files contain all project context. Don't duplicate their content here.

---

## Core Principles

**Project:** Desktop video editor (CapCut Clone)  
**Stack:** Tauri (Rust + React) + TypeScript + Konva.js + FFmpeg + Zustand  
**Platform:** macOS (MVP)

**Goal:** Build robust MVP that prioritizes video processing reliability and clean architecture.

---

## Essential Documentation

| Document | Use When |
|----------|----------|
| `memory-bank/activeContext.md` | Every session start |
| `memory-bank/progress.md` | Every session start |
| `memory-bank/projectbrief.md` | Unclear on goals/scope |
| `memory-bank/systemPatterns.md` | Implementing features |
| `memory-bank/techContext.md` | Tech stack questions |
| `_docs/architecture.md` | Before any implementation |
| `_docs/task-list-mvp.md` | Current task details |
| `_docs/react-best-practices.md` | Component development |
| `_docs/chunks/*.md` | Step-by-step implementation |

---

## Workflow Rules

### Rule 1: Ask Before Acting

**STOP and ask when:**
- Requirements unclear or multiple solutions exist
- Decision impacts architecture
- Adding functionality not in task-list-mvp.md
- Uncertain about completion criteria
- Errors with multiple possible causes
- FFmpeg or Tauri IPC concerns

**Format:**
```
‚ö†Ô∏è CLARIFICATION NEEDED
Context: [what you're working on]
Issue: [uncertainty]
Options: [2-3 approaches]
Recommendation: [suggested approach with reasoning]
```

### Rule 2: Check-In After Every Task

**After completing ANY task:**

1. STOP - don't proceed automatically
2. Report using this format:
```
‚úÖ TASK COMPLETED
Task: [Task X.Y from task-list-mvp.md]
Changes: [files modified/created]
Testing: [what you tested, results]
Acceptance Criteria: [checklist from task]
Ready for Next: [Yes/No]
Blockers: [any issues]
```
3. WAIT for approval before next task

### Rule 3: Never Auto-Commit

- ‚ùå NEVER commit automatically
- ‚úÖ ALWAYS ask first using:
```
üìù READY TO COMMIT
Files changed: [list]
Proposed message: [Phase X.Y] [description]
Options: A) Commit now B) Wait C) Modify message
```

**Commit format:** `[Phase X.Y] Brief description`

### Rule 4: Document Everything

After EVERY completed task, **ASK** if you should create a context summary:

```
üìÑ CREATE CONTEXT SUMMARY?

Task completed: [Task X.Y name]
Next file number: [N based on existing files]
Suggested filename: N_YYYY.MM.DD.description.md

Would you like me to create a context summary?
A) Yes, create it
B) No, skip for now
```

**File naming format:** `N_YYYY.MM.DD.description.md`
- `N` = Sequential number starting at 0, increment for each new summary
- `YYYY.MM.DD` = Date (e.g., 2025.01.15)
- `description` = Brief kebab-case description (e.g., `setup-project-structure`)

**Examples:**
- `0_2025.01.15.setup-project-structure.md`
- `1_2025.01.15.implement-ffmpeg-executor.md`
- `2_2025.01.16.build-media-library.md`

**To find next number:** Check existing files in `_context-summaries/` and use highest N + 1

**Summary should include:**
- What was built
- Files changed (with purpose)
- Technical decisions and rationale
- FFmpeg/Tauri specifics
- Testing notes
- Next steps

---

## Architecture Compliance

**Follow `_docs/architecture.md` specifications:**
- 11 independent modules with explicit dependencies
- Exact type definitions from Module 2
- Zustand store patterns from Module 3
- Tauri IPC from Module 4
- FFmpeg integration from Module 5

**Before implementing any module:** Read complete specification in architecture.md

---

## Technical Standards

### TypeScript
- ‚úÖ Strict mode, no `any`
- ‚úÖ Type all parameters and returns
- ‚úÖ Functional components with hooks only
- ‚úÖ Components <200-300 lines
- ‚ùå NO class components
- ‚ùå NO prop drilling beyond 2 levels

### Rust
- ‚úÖ All commands return `Result<T, String>`
- ‚úÖ Parse FFmpeg output as JSON
- ‚úÖ Include stderr in error messages
- ‚úÖ Test FFmpeg commands manually first

### Performance Targets
- Timeline responsive with 10+ clips
- Preview at 30fps minimum
- App launch <5 seconds
- No memory leaks

See `_docs/react-best-practices.md` for complete standards.

---

## Testing Requirements

Before marking task complete:
- [ ] Compiles without errors (TS + Rust)
- [ ] No linting warnings
- [ ] Works in dev (`npm run tauri dev`)
- [ ] Tested with sample videos
- [ ] Acceptance criteria met
- [ ] Performance targets met

---

## Error Handling

When errors occur:
1. Read full error message
2. Check docs (Tauri, FFmpeg, React)
3. Report with:
```
üö® ERROR ENCOUNTERED
Type: [Rust/TypeScript/FFmpeg]
Message: [full error]
Location: [file:line]
Analysis: [root cause]
Solution: [proposed fix]
Confidence: [High/Medium/Low]
```
4. WAIT for approval

---

## MVP Scope

**IN SCOPE:** Import, timeline, preview, trim, export to MP4  
**OUT OF SCOPE:** Recording, multiple tracks, undo/redo, project save, effects

See `memory-bank/productContext.md` for complete scope.

---

## Communication

**Status Indicators:**
- ‚ö†Ô∏è Clarification needed
- ‚úÖ Task completed
- üìù Ready to commit
- üö® Error encountered
- üìÑ Context summary prompt
- üí° Suggestion
- ü§î Need help
- ‚ö° Performance concern
- üîí Security concern
- üé¨ FFmpeg note
- ‚öôÔ∏è Rust/Tauri note

**Be concise, proactive, and honest.**

---

## Session Management

**Every session start:**
- [ ] Read activeContext.md
- [ ] Review progress.md
- [ ] Check current task in task-list-mvp.md
- [ ] Ask about blockers

**Every 5 tasks or 2 hours:**
- Ask if you should create session summary: `N_YYYY.MM.DD.session-summary.md` in `_context-summaries/`

**Session end:**
- [ ] Document progress
- [ ] Note blockers
- [ ] Suggest next steps

---

## Non-Negotiables

1. ‚úÖ Follow architecture.md module specs
2. ‚úÖ Ask when uncertain
3. ‚úÖ Check in after tasks
4. ‚úÖ Never auto-commit
5. ‚úÖ Ask before creating summaries
6. ‚úÖ TypeScript strict mode
7. ‚úÖ Sequential task development
8. ‚úÖ Test with real videos

---

## Quick Reference

**Before any work:** activeContext.md ‚Üí progress.md ‚Üí architecture.md  
**When uncertain:** Stop and ask  
**After task:** Check in ‚Üí ask about summary ‚Üí ask about commit ‚Üí wait  
**Before commit:** Ask for approval  
**Every module:** Read architecture.md spec first  

**Success measured by:**
- ‚úÖ MVP tasks completed (task-list-mvp.md)
- ‚úÖ Video processing works flawlessly
- ‚úÖ Clean, type-safe code
- ‚úÖ Complete documentation
- ‚úÖ Architecture compliance

---

**Remember:** Ask questions > make assumptions. Working MVP > feature creep. Read memory-bank files first.
